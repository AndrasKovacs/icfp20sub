let U0 = U 0 in
let U1 = U 1 in

λ (Bool  : U0)
  (true  : Bool)
  (false : Bool)
  (case  : {A} → Bool → A → A → A)
  (List  : U0 → U0)
  (nil   : {A} → List A)
  (cons  : {A} → A → List A → List A)
  (foldr : {A B} → (A → B → B) → B → List A → B)

  (Nat₀  : U0)
  (zero₀ : Nat₀)
  (suc₀  : Nat₀ → Nat₀)
  (rec₀  : {A} → A → (A → A) → Nat₀ → A)
  (mul₀  : Nat₀ → Nat₀ → Nat₀)
  (add₀  : Nat₀ → Nat₀ → Nat₀).

let id : {A : ^U} → A → A = λ x. x in

let const : {A B : ^U} → A → B → A = λ x y. x in

let comp : {A B C : ^U} → (B → C) → (A → B) → A → C
    = λ f g x. f (g x) in

let ap : {A B : ^U} → (A → B) → A → B
   = λ f x. f x in

let foo : Nat₀ → Nat₀ = ap (comp suc₀) (comp suc₀ id) in

let Nat₁ : U1 = (N : U1) → N → (N → N) → N in
let zero₁ : Nat₁ = λ _ z s. z in
let suc₁ : Nat₁ → Nat₁ = λ a _ z s. s (a _ z s) in
let add₁ : Nat₁ → Nat₁ → Nat₁ = λ a b N z s. a N (b N z s) s in
let n₁5 : Nat₁ = λ _ z s. s (s (s (s (s z)))) in
let n₁10 = add₁ n₁5 n₁5 in

let n₀5 = suc₀ (suc₀ (suc₀ (suc₀ (suc₀ zero₀)))) in
let n₀10 = add₀ n₀5 n₀5 in

let List₁ : U1 → U1 = λ A. (L : U1) → (A → L → L) → L → L in
let nil₁ : {A} → List₁ A = λ _ c n. n in
let cons₁ : {A} → A → List₁ A → List₁ A = λ a as L c n. c a (as L c n) in

let Pair : U1 -> U1 -> U1 = λ A B. (P : U1) → (A → B → P) → P in
let pair : {A B} → A → B → Pair A B = λ a b P p. p a b in
let fst : {A B} → Pair A B → A = λ p. p _ (λ a b. a) in
let snd : {A B} → Pair A B → B = λ p. p _ (λ a b. b) in

let inlCase : {A : ^U} → Bool → A → A → A = case in

let test : Nat₀ = id n₀10 in
let test : Bool → Nat₀ → Nat₀ = λ b n. inlCase b (add₀ n n₀10) n in

let map : {A B : ^U} → (A → B) → List A → List B
    = λ f. foldr (λ a. cons (f a)) nil in

let map₁ : {A B} → (A → B) → List₁ A → List₁ B
    = λ f as. as _ (λ a. cons₁ (f  a)) nil₁ in

let not : ^Bool → ^Bool = λ b. case b false true in

let mapNot : List Bool → List Bool = map not in

let exp₀ : Nat₀ → Nat₀ → Nat₀ = λ a b. rec₀ (suc₀ zero₀) (mul₀ b) a in

let exp₁ : Nat₁ → Nat₀ → Nat₀
    = λ a b. a _ (suc₀ zero₀) (λ n. mul₀ n b) in

let exp5 : Nat₀ → Nat₀ = exp₁ n₁5 in

let lowerNat : Nat₁ → Nat₀ = λ n. n _ zero₀ suc₀ in

let lowerList : {A : ^U0} → List₁ A → List A
    = λ as. as _ cons nil in

let bar : List₁ ({A:^U} → A → A) = cons₁ (λ x. x) nil₁ in
let bar : List₁ (Bool → Bool) = map₁ (λ f. f {<Bool>}) bar in

let upto : Nat₁ → List₁ Nat₁
    = λ n. n _ (λ acc. cons₁ acc nil₁) (λ hyp acc. hyp (suc₁ acc)) zero₁ in

let expSum : List₁ Nat₀ → Nat₀
    = λ ns. ns (List₁ Nat₀ → Nat₀)
               (λ n hyp xs. <let x = [n] in hyp (cons₁ x xs)>)
               (λ xs. xs _ add₀ zero₀)
               nil₁ in

let test : Nat₀ = expSum (cons₁ n₀5 (cons₁ (add₀ n₀5 n₀10) nil₁)) in
let test : Nat₀ = lowerNat n₁10 in

U 0