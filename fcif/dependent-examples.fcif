
-- This file contains a number of examples which rely on dependent typing.


let Nat = (N : Set) → (N → N) → N → N in
let zero : Nat = λ N s z. z in
let suc  : Nat → Nat = λ a N s z. s (a N s z) in

let Pair : Set → Set → Set = λ A B. (P : Set) → (A → B → P) → P in
let pair : {A B} → A → B → Pair A B = λ a b P p. p a b in
let fst  : {A B} → Pair A B → A = λ p. p _ (λ a b. a) in
let snd  : {A B} → Pair A B → B = λ p. p _ (λ a b. b) in

let Eq : {A} → A → A → Set = λ {A} x y. (P : A → Set) → P x → P y in
let refl : {A x} → Eq {A} x x = λ P px. px in

-- let Vec : Nat → Set → Set = λ n A. n _ (λ P →

Set
