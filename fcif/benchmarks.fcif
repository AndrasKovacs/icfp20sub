
-- usage e.g : cat example.fcif | fcif elab

-- Examples for elaborating first-class polymorphism from
--   https://www.microsoft.com/en-us/research/uploads/prod/2017/07/impredicative-pldi18.pdf
-- the same examples are also found in
--   https://www.microsoft.com/en-us/research/publication/a-quick-look-at-impredicativity/

-- Note: extra features compared to the paper:
--   - optional type annotations on lambdas, e.g. (λ (A : U). A)
--   - optional omission of type annotation on implicit binder and let,
--     e.g.  let foo = U in foo   and   {A} → A → A
--   - special treatment of top-level lambdas, e.g. as in this file.
--     top-level lambdas are printed roughly as formatted in this file, and
--     they are also not printed in spines of unsolved metas in elaboration output.

-- Note: when we print elaboration output, curried functions are *not* computed away.
--     This is partly because I just haven't yet implemented the evaluator which removes them,
--     (although of course normalization removes them - the point is to *only* compute curried
--      functions!), partly because it is highly useful for debugging and visualizing elaboration
--     to see all inserted curried lambdas.

-- preliminary types and definitions
------------------------------------------------------------

λ (List   : U → U)
  (Bool   : U)
  (ST     : U → U → U)
  (Pair   : U → U → U)
  (pair   : {A B} → A → B → Pair A B)
  (true   : Bool)
  (Int    : U)
  (zero   : Int)
  (inc    : Int → Int)
  (head   : {A} → List A → A)
  (tail   : {A} → List A → List A)
  (nil    : {A} → List A)
  (cons   : {A} → A → List A → List A)
  (append : {A} → List A → List A → List A)
  (length : {A} → List A → Int)
  (map    : {A B} → (A → B) → List A → List B)
  (runST  : {A} → ({S} → ST S A) → A)
  (argST  : {S} → ST S Int).


let the    : (A : U) → A → A         = λ A a. a in
let const  : {A B} → A → B → A       = λ x y. x in
let IdTy   : U                       = {A} → A → A in
let single : {A} → A → List A        = λ a. cons a nil in
let id     : {A} → A → A             = λ a. a in
let ids    : List IdTy               = nil in
let app    : {A B} → (A → B) → A → B = id in
let revapp : {A B} → A → (A → B) → B = λ x f. f x in
let poly   : IdTy → Pair Int Bool    = λ f. pair (f zero) (f true) in
let choose : {A} → A → A → A         = const in
let auto   : IdTy → IdTy             = id in
let auto2  : {B} → IdTy → B → B      = λ _ b. b in


-- Table
--------------------------------------------------------------------------------

-- A: polymorphic instantiation
--------------------------------------------------------------------------------

-- A1 : FCIF can infer a type without annotation, but it does not do
--      let-generalization, so the resulting would have unsolved metas.

-- No generalization
let const2 : {A B} → A → B → B = λ x y. y in

-- No generalization
let A2 : IdTy → IdTy = choose id in

let A3 = choose nil ids in

-- No generalization
let A4 : IdTy → IdTy = λ (x : IdTy). x x in

let A5 = id auto in

-- No generalization
let A6 : {B} → IdTy → B → B = id auto2 in

let A7 = choose id auto in

-- let A8 = choose id auto2 in -- FAILS
--   the reason is simply that the types are definitionally different,
--   the order of implicit args does not match. FCIF does *not* reorder or float out
--   implicit args, intentionally, since we support mixing implicit and explicit
--   args in arbitrary order.

-- No generalization
let A9 : ({A} → (A → A) → List A → A) → IdTy
    = λ f. f (choose id) ids in

let A10 = poly id in

let A11 = poly (λ x. x) in

let A12 = id poly (λ x. x) in

-- B: inference of polymorphic arguments
--------------------------------------------------------------------------------

-- FAILS let B1 = λ f. pair (f zero) (f true) in

-- FAILS let B2 = λ xs. poly (head xs) in
  -- however, it could possibly work with telescope application insertion + postponing

-- C: functions on polymorphic lists
--------------------------------------------------------------------------------

let C1 = length ids in

let C2 = tail ids in

-- No generalization
let C3 : IdTy = head ids in

-- No generalization
let C4 : List IdTy = single id in

let C5 = cons id ids in

let C6 = cons (λ x. x) ids in

let C7 = append (single inc) (single id) in

-- No generalization
let C8 : _ → IdTy = λ (g : {A} → List A → List A → A). g (single id) ids in

let C9 = map poly (single id) in

let C10 = map head (single ids) in

-- D: application functions
--------------------------------------------------------------------------------

let D1 = app poly id in

let D2 = revapp id poly in

let D3 = runST argST in

let D4 = app runST argST in

let D5 = revapp argST runST in

-- D: η-expansion
--------------------------------------------------------------------------------

-- let E1 =   -- FAILS
--   λ (h : Int → {A} → A → A)(k : {A} → A → List A → A)(lst : List ({A} → Int → A → A)).
--   k h lst in
--   -- fails again because of mismatched impl/expl arguments

-- No generalization
let E2 =
  λ (h : Int → {A} → A → A)(k : {A} → A → List A → A)(lst : List ({A} → Int → A → A)).
  k (λ x. h x) lst in

let E3 =
  λ (r : ({A} → A → {B} → B → B) → Int). r (λ x y. y) in

-- U

-- notes
------------------------------------------------------------

-- (λ x {y} . y) 1 {2}

-- let foo = λ (i : Int)(j : Int). (λ x {y}. y) i {j} in

-- let foo = (λ {x}{y}. x) {zero}{zero} in


-- "FCIF cannot infer implicit function types for function arguments":
--  but it can: λ f . f {1}.
let foo = λ f. f {zero} in

let bar : ({n : Int} → Int → Int) → (Int → Int)
    = foo in


    -- e1 = λ f . (f 2 , f {3} 4)
    -- e2 = λ f . (f {3} 4 , f 2)

-- let e1 = λ f. pair (f {zero} zero) (f zero) in   -- never works bc of non-pattern eq

-- let e2 = λ f (x : Int). pair (f x) (f {x} x) in
let e2 = λ f (x : Int). pair (f {x} x) (f x) in

-- let bar = let foo = λ _. id in the (Int → Int → Int) foo in

let bar : List IdTy = map (λ _. id) ids in

-- let f = λ A {B}. A in
-- let g : U → {B : U} → U = f in

-- let f : _ = λ {A}{B} (x : A) (y : B). x in
-- let g : {A B : U} → A → B → A = f in

U
